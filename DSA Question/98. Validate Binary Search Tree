/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
const isValidBSTRecursive = (root) => {
  if (!root) {
      return [true, Math.pow(2,31), -Math.pow(2, 31) -1];
  };
  let leftSideOfWholeTree = isValidBSTRecursive(root.left);
  let rightSideOfWholeTree = isValidBSTRecursive(root.right);
  if(!leftSideOfWholeTree[0] || !rightSideOfWholeTree[0]) {
      return [false, 0, 0]
  }
  const valid = root.val < rightSideOfWholeTree[1] && root.val > leftSideOfWholeTree[2]
  const min = Math.min(root.val, leftSideOfWholeTree[1], rightSideOfWholeTree[1]);
  const max = Math.max(root.val, leftSideOfWholeTree[2], rightSideOfWholeTree[2]);
  return [valid, min, max];
}

var isValidBST = function(root) {
  const result = isValidBSTRecursive(root);
  return result[0];
};