#a function that calls itself in its body

#factorial 
# 1! = 1 = 1
# 2! = 2 * 1 = 1
# 3! = 3 * 2 * 1 = 6

# n! = n(n-1)

def factorial(n):
  """return the factorial of positive integer n"""
  if n == 1:
    return 1
  else:
    return n * factorial( n - 1 )

#if statement is the bae case 1!=1
#else statement above is the recursive case n! = n * ( n - 1 )!

# summing the digits = 1 number + 2 number + n number = 

def sum_digits(n):
  """return the sum of the digits of positive integer n"""
  if n < 10: # base
    return n
  else: # recursive 
    all_but_last = n//10
    last = n % 10
    return sum_digits(all_but_last) + last

##base case:
# n is a single digit number    sum_digits(n)= n
# recursive case 
# n has 2 or more digit 
# sum_digits(n)= last digits of n + sum_digits (previous digits)

#fibonacci
# 
#  #return the nth number in the Fib sequence 
def fib(n):
  if n == 1: #base case 1: n is 1, nth number is 0
    return 0
  elif n == 2: #base case 2: n is 2, nth number is 1
    return 1
  else:
    return fib(n-1) + fib(n-2) # recursive case: n is 3 or larger, nth number = (n -1)th number + (n-2)th number


#Palindrome (read same backward and forward ie: mom, 1221)

def isPalindrome(s):
  """return whether string s is a palindrome"""
  if len(s) <= 1: #base case: s is empty 1 character long or empty string -> s is a palindrome
    return True
  else: # recursive case: s has more than 2 character, if 1st digit matches last digit AND remaining characters form a palindrome, then s is a palindrome, otherwise s is not
    return s[0] == s[-1] and isPalindrome(s[1:-1])

    