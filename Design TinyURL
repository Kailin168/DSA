SYSTEM DESIGN FOR TinyURL

URL shortening simplifies long URLs into short aliases for better usability. Clicking on the short link redirects to the original URL.

Advantages:
1. Convenient and optimized for various devices.
2. Professional, visually engaging, and easily shareable.
3. Reduced error-prone typing.
4. Requires less storage space.

Disadvantages:
1. Loss of brand originality with third-party short URLs.
2. Risk of service shutdown affecting all shortened URLs.
3. Business brand image depends on service trustworthiness.
4. Competition for desirable custom short URLs.

Building Blocks for TinyURL:
1. URL Storage:
   - Manages storage for original and shortened URLs.
2. ID Generator:
   - Generates unique IDs for each shortened URL.
3. Request Handler:
   - Stores and efficiently serves frequent URL-related requests.
4. Rate Limiter:
   - Limits the number of incoming requests to prevent abuse.
Design and Deployment:
- Explains the working of each component and their collaboration.
- Describes the overall mechanism of the components working as a unit.
Encoder:
- Details the inner workings of the encoder.
- Provides reasons for usage and mathematical explanations.
Evaluation:
- Tests the design considering various requirements.
- Explores possibilities for improvement.

TinyURL system design incorporates essential building blocks to manage URL storage, generate unique IDs, handle requests efficiently, and prevent abuse through rate limiting. The design aims to balance convenience and potential drawbacks associated with third-party services.

Functional Requirements:
1. Short URL Generation:
   - Generate a unique short alias for a given URL.
2. Redirection:
   - Redirect users to the original URL using the short link.
3. Custom Short Links:
   - Allow users to create custom short links for their URLs.
4. Deletion:
   - Enable users to delete short links they generated.
5. Update:
   - Allow users to update the associated long URL.
6. Expiry Time:
   - Set a default expiration time for short links, with user customization.

Non-functional Requirements:
1. Availability:
   - Ensure high availability to avoid URL redirection failures.
2. Scalability:
   - Horizontally scale the system to handle increasing demand.
3. Readability:
   - Generate short links that are easily readable and typeable.
4. Latency:
   - Provide low-latency performance for a smooth user experience.
5. Unpredictability:
   - Generate highly unpredictable short URLs for security.

Resource Estimation:
1. Storage Estimation:
   - Total storage required for 5 years: 6 TB.
2. Query Rate Estimation:
   - New URL shortening requests per second: 76 URLs/s.
   - Redirection rate per second: 7.6 K URLs/s.
3. Bandwidth Estimation:
   - Incoming data: 304 Kbps.
   - Outgoing data: 30.4 Mbps.

Memory Estimation:
   - Memory requirement for cache: 66 GB.

Number of Servers Estimation:
   - Number of servers needed: 12,500.

Building Blocks:
1. Database(s):
   - Store the mapping of long URLs to short URLs.
2. Sequencer:
   - Provide unique IDs for short URL generation.
3. Load Balancers:
   - Distribute requests among servers.
4. Caches:
   - Store frequently accessed short URLs.
5. Rate Limiters:
   - Prevent system exploitation.
6. Servers:
   - Handle service requests and run application logic.
7. Base-58 Encoder:
   - Transform numeric IDs for better readability.

   TinyURL design focuses on functionality, performance, and scalability, with key components like databases, sequencers, load balancers, caches, rate limiters, servers, and encoders. Estimations guide resource allocation for an efficient and effective system.

Design and Deployment of TinyURL 
1. Shortening a URL
   - API: `shortURL(api_dev_key, original_url, custom_alias=None, expiry_date=None)`
   - Parameters:
      - `api_dev_key`: User's unique identifier.
      - `original_url`: Long URL to be shortened.
      - `custom_alias`: User-defined short URL (optional).
      - `expiry_date`: Expiration date for the short URL (optional).
   - Returns: Shortened URL or an error code.

2. Redirecting a short URL
   - API: `redirectURL(api_dev_key, url_key)`
   - Parameters:
      - `api_dev_key`: User's unique identifier.
      - `url_key`: Shortened URL to be redirected.
   - Redirects user to the original URL associated with the `url_key`.

3. Deleting a short URL
   - API: `deleteURL(api_dev_key, url_key)`
   - Parameters:
      - `api_dev_key`: User's unique identifier.
      - `url_key`: Shortened URL to be deleted.
   - Returns: System message, "URL Removed," upon successful deletion.

Design Components:
1. Database:
   - Stores user details and URL mappings.
   - NoSQL database like MongoDB for scalability.
   - Read-heavy, supports leader-follower protocol for replicas.

2. Short URL Generator:
   - Includes a sequencer for generating unique numeric IDs.
   - Utilizes a Base-58 encoder for converting numeric IDs to alphanumeric for short URLs.

3. Other Building Blocks:
   - Load Balancing:
      - Global Server Load Balancing (GSLB) for improved availability.
      - Geographically consistent database allows safe global distribution.

   - Cache:
      - Memcached for read-intensive caching needs.
      - Data-center-specific caching layer to handle native requests.

   - Rate Limiter:
      - Applies a fixed window counter algorithm for rate limiting.
      - Uses `api_dev_key` for user identification and quota allocation.

The encoder comes into play to enhance the readability of our short URLs. While our sequencer generates a 64-bit ID in base-10, opting for base-64 encoding brings about challenges. To avoid confusion with look-alike characters (e.g., O and 0), and to ensure better readability, we choose base-58 encoding instead of base-64.

Base-58:
Base-58 involves a set of characters from A-Z, a-z, and 0-9, excluding potentially confusing characters. Here's the breakdown:

| Value | Character | Value | Character | Value | Character | Value | Character |
|-------|-----------|-------|-----------|-------|-----------|-------|-----------|
| 0     | 1         | 15    | G         | 30    | X         | 45    | n         |
| 1     | 2         | 16    | H         | 31    | Y         | 46    | o         |
| 2     | 3         | 17    | J         | 32    | Z         | 47    | p         |
| 3     | 4         | 18    | K         | 33    | a         | 48    | q         |
| 4     | 5         | 19    | L         | 34    | b         | 49    | r         |
| 5     | 6         | 20    | M         | 35    | c         | 50    | s         |
| 6     | 7         | 21    | N         | 36    | d         | 51    | t         |
| 7     | 8         | 22    | P         | 37    | e         | 52    | u         |
| 8     | 9         | 23    | Q         | 38    | f         | 53    | v         |
| 9     | A         | 24    | R         | 39    | g         | 54    | w         |
| 10    | B         | 25    | S         | 40    | h         | 55    | x         |
| 11    | C         | 26    | T         | 41    | i         | 56    | y         |
| 12    | D         | 27    | U         | 42    | j         | 57    | z         |
| 13    | E         | 28    | V         | 43    | k         |       |           |
| 14    | F         | 29    | W         | 44    | m         |       |           |

Converting base-10 to base-58:
To grasp the inner workings, let's see how we convert a base-10 numeric ID (e.g., 2468135791013) to base-58 alphanumeric. We repeatedly divide by 58, noting the remainders and assigning corresponding characters. The result is a base-58 short URL.

Converting base-58 to base-10:
Reverse engineering involves multiplying each character's index by powers of 58 and summing them up. This process yields the original base-10 numeric ID, ensuring bidirectional functionality.

The Scope of the Short URL Generator:
The generator's output adheres to design-imposed limitations, ensuring alphanumeric characters, distinctiveness, and a minimum default length of six characters. Sequencer IDs start from 1 billion, and the maximum digits in an ID are around 20, limiting the encoded short URL to approximately 11 characters.

The Sequencer's Lifetime:
The sequencer's life expectancy is extensive. With over 7.6 billion yearly requests and a starting range of 1 billion, it boasts a lifespan of around 7.7 billion years before depletion. This makes it a robust foundation for our URL shortening service.

Evaluation of TinyURL's Design Unveiled
   Availability:
      TinyURL guarantees high availability for generating and redirecting short URLs. With built-in replication in databases, caches, and application servers, it ensures fault tolerance. Backups are conducted twice daily using Amazon S3, offering cross-zonal replication. Global server load balancing handles traffic intelligently, and rate limiters prevent resource abuse and protect against DoS attacks.
   Scalability:
      The design is scalable with horizontal sharding in databases, consistent hashing for load balancing, and the use of MongoDB, a NoSQL database. The flexibility of NoSQL databases suits our needs, and the large number of unique IDs from the sequencer ensures scalability.
   Readability:
      The choice of a base-58 encoder enhances readability by eliminating confusing characters (e.g., 0 and O) and non-alphanumeric characters (e.g., + and /). This ensures user-friendly short URLs and compatibility with various systems.
   Latency:
      The system ensures low latency by minimizing delays in short URL generation and utilizing MongoDB's efficiency in reading tasks. A distributed cache further reduces service delays, providing high throughput.