What is abstraction?
Abstraction is a technique that helps us simplify things by hiding unnecessary details. It allows us to focus on the main ideas and goals without getting lost in the complexities. By using abstraction, we can get a clearer and more general understanding of a concept or problem. Think of it like looking at a simplified illustration that represents a complex idea. It helps us grasp the essence without getting overwhelmed by the intricacies.



1. Database abstraction transactions 
Database abstraction transactions simplify the process of handling data when multiple users are reading, writing, or changing it at the same time. It provides a straightforward way to either save the changes if everything goes well or cancel them if there's a problem. In both cases, the data transitions from one reliable state to another. Transactions allow users to focus on their main tasks instead of worrying about complicated issues that can arise when data is being modified concurrently.


2. Abstractions in distributed systems
Abstractions in distributed systems make life easier for engineers by simplifying their work and removing the need to deal with the underlying complexity of the systems. 

With the increasing popularity of distributed services provided by major companies like Amazon AWS, Google Cloud, and Microsoft Azure, the concept of abstraction in distributed systems has gained traction. Each service offers different levels of agreement, but the important thing is that the intricate details of implementing these distributed services are hidden from users. This allows developers to focus on building their applications without getting caught up in the complexities of the distributed systems, which can be very challenging to understand.

In today's world, applications can't function properly if they rely on a single node, especially with a rapidly growing number of users. Abstractions in distributed systems enable engineers to easily transition to distributed systems, which helps them scale their applications to meet the demands of a larger user base.

Remote Procedure Calls
Remote procedure calls (RPCs) provide an abstraction of a local procedure call to the developers by hiding the complexities of packing and sending function arguments to the remote server, receiving the return values, and managing any network retries.

Spectrum of Consistency Models
What is consistency?
In distributed systems, consistency may mean many things. One is that each replica node has the same view of data at a given point in time. The other is that each read request gets the value of the recent write. These are not the only definitions of consistency, since there are many forms of consistency. Normally, consistency models provide us with abstractions to reason about the correctness of a distributed system doing concurrent data reads, writes, and mutations.


The two ends of the consistency spectrum are:

Strongest consistency
Weakest consistency


Type of Consistency:
Consistency models define how data is updated and read in distributed systems. Here are the main types of consistency models:

1. Eventual Consistency: This is the weakest consistency model where replicas may temporarily have different values but will eventually converge. It is suitable for applications that don't require strict ordering or the latest data.

2. Causal Consistency: This model preserves the order of causally-related operations, but operations that are not causally related can be seen in different orders. It is used to prevent non-intuitive behaviors and is commonly used in systems like commenting systems.

3. Sequential Consistency: This model preserves the order specified by each client's program. However, it doesn't guarantee instant visibility or the same order of writes according to a global clock. It is used in applications where order matters, such as social networking posts.

4. Strict Consistency (Linearizability): This is the strongest consistency model where all replicas return the latest write value, and reads reflect the effects of all prior writes. Achieving strict consistency is challenging in distributed systems but necessary for critical operations like updating passwords.

Each consistency model has its trade-offs in terms of performance and availability. Strong consistency models may sacrifice performance and availability for data integrity, while weaker models prioritize performance and availability but may result in temporary inconsistencies.

It's important for application programmers to choose the appropriate consistency model based on their specific requirements and trade-offs.


