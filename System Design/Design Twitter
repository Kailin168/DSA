Twitter System Design

Twitter is a widely-used microblogging social network where users can post and interact with short messages called "Tweets." With about 397 million users as of 2021, Twitter is known for its real-time sharing of news, engagement with diverse communities, and cultural interactions.

1. Requirements:
- Functional Requirements:
  - Ability to post new tweets (text, image, video, etc.).
  - Ability to follow other users.
  - Newsfeed feature consisting of tweets from followed users.
  - Search functionality for tweets.
- Non-Functional Requirements:
  - High availability with minimal latency.
  - Scalability and efficiency.
- Extended Requirements:
  - Metrics and analytics.
  - Retweet functionality.
  - Favorite tweets.

  Estimation and Constraints:
- Traffic:
  - 1 billion tweets per day.
  - 100 million media files per day (10% of tweets).
  - Resulting in 12K requests per second.
- Storage:
  - 100 GB of database storage per day for text tweets.
  - 5 TB of storage per day for media files.
  - Total of 19 PB of storage for 10 years.
- Bandwidth:
  - Requires a minimum bandwidth of around 60 MB per second.

2. Data Model Design:
  - Tables: users, tweets, favorites, followers, feeds, feeds_tweets.
  - Relational database (e.g., PostgreSQL) or distributed NoSQL database (e.g., Apache Cassandra).

3. API Design:
  - Post a Tweet API.
  - Follow/Unfollow API.
  - Get Newsfeed API.

4. High-Level Design:
- Microservices Architecture:
    -User Service.
    -Newsfeed Service.
    -Tweet Service.
    -Search Service.
    -Media Service.
    -Notification Service.
    -Analytics Service.
- Inter-Service Communication:
    -REST, HTTP, or gRPC.
- Newsfeed:
    -Generation: Retrieve followed entities, fetch relevant tweets, ranking algorithm, paginated response.
    -Publishing: Pull model, push model, or hybrid model.
- Ranking Algorithm:
    -Affinity, Weight, Decay.
    -Machine learning models for complex ranking.
- Retweets:
    -Represented as a new tweet linked to the original tweet.
- Search:
    -Use Elasticsearch for efficient search.
- Notifications:
    -Use a message queue (e.g., Apache Kafka) for push notifications.
- Metrics and Analytics:
    -Use Apache Kafka and Apache Spark for processing events and analytics.
- Caching:
    -Cache top 20% of tweets with LRU eviction policy.
- Media Storage:
    -Use object storage or distributed file storage (e.g., HDFS, GlusterFS).
- CDN:
    -Use CDN (e.g., Amazon CloudFront, Cloudflare) for serving static files.
    -Identify and Resolve Bottlenecks:
- Multiple service instances, load balancers, read replicas, distributed cache.
    -Use message brokers for robustness.
    -Media processing and compression in the media service.