Designing Pastebin

1. What is Pastebin?
Pastebin is like an online notepad where you can put plain text or images. It gives you a special web link to easily share what you've uploaded.
**Simple Explanation: Designing a Text Storage Service**

2. Requirements and Goals
Functional Requirements:
- Users can upload text and get a unique link.
- Only text uploads are allowed.
- Data and links expire after a set time, which users can choose.
- Users can pick a custom name for their text.
Non-Functional Requirements:
- The system must be reliable; no data loss.
- It should always be available for users.
- Quick and real-time access to pasted text.
- Links shouldn't be easy to guess.
Extended Requirements:
- Keep track of how often a text is viewed.
- Allow other services to use our system through REST APIs.

3. Some Design Considerations
- Limit the size of pastes to prevent misuse (e.g., 10MB).
- Consider size limits for custom URLs to keep things organized.

4. Capacity Estimation and Constraints

- Expect more reads than new pastes (5:1 ratio).
- Assume 1 million new pastes daily, leading to 5 million daily reads.
- Storage: 10GB daily, needing 36TB over 10 years.
- Unique keys (using base64 encoding) require 22GB.
- Bandwidth: 12 new pastes/sec (write) and 58 reads/sec.

5. System APIs

- Use SOAP or REST APIs for functionalities like creating, retrieving, and deleting pastes.

6. Database Design

- Two tables for paste information and user data.
- External storage for paste content.

7. High-Level Design

- Application layer for read and write requests.
- Separate storage for metadata and paste content.

8. Component Design

a. Application Layer:
- Handles user requests and interacts with the backend.
- Generates unique keys for pastes.
- Manages custom keys, avoiding duplicates.

b. Datastore Layer:
- Metadata Database (e.g., MySQL or Dynamo): Stores paste info.
- Object Storage (e.g., Amazon S3): Stores paste content.

9. Purging or DB Cleanup

- Similar to designing a URL shortening service.

10. Data Partitioning and Replication

- Similar to designing a URL shortening service.

11. Cache and Load Balancer

- Similar to designing a URL shortening service.

12. Security and Permissions

- Similar to designing a URL shortening service.