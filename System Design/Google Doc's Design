System design Google Docs

Intro: 
Google Docs is a tool for working together on documents. When creating a collaborative document editing service, we can choose between two approaches: a centralized client-server model or a peer-to-peer model. Since most commercial solutions prefer the client-server model, we'll focus on that in this discussion.

Requirements
Functional Requirements:
1. Document Collaboration:
   - Allow multiple users to edit a document simultaneously.
   - Enable a large number of users to view a document.
2. Conflict Resolution:
   - Resolve conflicts when users edit the same part of a document.
   - Push edits made by one user to others.
3. Suggestions:
   - Provide suggestions for completing words, phrases, and fixing grammatical errors.
4. View Count:
   - Show the view count of the document.
5. History:
   - Allow users to see the collaboration history of the document.

Non-functional Requirements:
1. Latency:
   - Maintain low latency for users collaborating from different regions.
2. Consistency:
   - Resolve conflicts and ensure a consistent document view.
3. Availability:
   - Ensure the service is available at all times.
4. Scalability:
   - Handle a large number of users simultaneously.

Components
1. Data Stores:
   - Relational database for user and document information.
   - NoSQL for user comments.
   - Time series for document edit history.
   - Blob storage for videos and images.
   - Cache (Redis) and CDN for performance.

2. Processing Queue:
   - Utilize WebSockets for efficient real-time collaboration.

3. Other Components:
   - Session servers for managing user sessions and document access.
   - Configuration, monitoring, pub-sub, and logging services for additional tasks.

Workflow

1. Collaborative Editing:
   - Resolve conflicts in the operations queue.
   - Batch and store data in the time series database.
   - Compress videos and images for storage efficiency.
