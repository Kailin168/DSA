PUB-SUB
What is a pub-sub system?
  A pub-sub system, short for publish-subscribe messaging, is a method of asynchronous communication between services in serverless and microservices architectures. It allows messages to be sent asynchronously to various subsystems of a system. In the pub-sub model, messages are published by a sender (publisher) and received by multiple recipients (subscribers) that have subscribed to the topic or channel associated with the message.

Motivation
  In distributed systems with a vast number of machines, using a pub-sub system for communication offers scalability benefits. The decoupling of producers and consumers allows independent scaling and development of components. This means adding or removing components does not affect others, leading to greater scalability.

Introduction to Pub-sub
Pub-sub messaging offers asynchronous communication, allowing messages to be sent asynchronously to various subsystems in a system. The pub-sub system consists of publishers who send messages and subscribers who receive the messages.

Introduction to Pub-sub:
Pub-sub messaging offers asynchronous communication, allowing messages to be sent asynchronously to various subsystems in a system. The pub-sub system consists of publishers who send messages and subscribers who receive the messages.
  Use cases of pub-sub:
  1. Improved Performance: Pub-sub enables push-based distribution, reducing response times and delivery latency.
  2. Handling Ingestion: Pub-sub helps handle log ingestion, managing and analyzing large amounts of data efficiently.
  3. Real-time Monitoring: Applications can use pub-sub to monitor systems in real time by receiving raw or processed messages.
  4. Replicating Data: Pub-sub can distribute changes, allowing followers in a leader-follower protocol to update data asynchronously.

Requirements:
Functional Requirements:
  - Create a topic: Producers should be able to create topics.
  - Write messages: Producers should write messages to topics.
  - Subscription: Consumers should subscribe to topics to receive messages.
  - Read messages: Consumers should be able to read messages from topics.
  - Specify retention time: Consumers can set the retention time for messages.
  - Delete messages: Messages should be deleted from topics after the specified retention period.
Non-functional Requirements:
  - Scalable: The system should scale with an increasing number of topics and message load.
  - Available: The system should be highly available for producers and consumers.
  - Durability: Messages accepted from producers must not be lost and should be delivered to subscribers.
  - Fault Tolerance: The system should handle failures gracefully.
  - Concurrent: The system should handle concurrency issues during reading and writing.