Sequencer: 
Basics of designing a sequencer

    The Importance and Design of Unique IDs in Distributed Systems
    Introduction:
    In a large distributed system, millions of events occur every second, such as commenting on a post, sharing a Tweet, or posting a picture. To distinguish these events from each other, a mechanism of assigning globally unique IDs is crucial. This mechanism ensures proper identification and enables various functionalities within the system.
      1. Unique IDs in Distributed Systems:
      Unique IDs serve multiple purposes in distributed systems, including:
      - Event Differentiation: With numerous events happening simultaneously, unique IDs allow us to distinguish one event from another.
      - Primary Keys in Databases: Unique IDs are commonly used as primary keys in databases, ensuring each entry has a distinct identifier.
      - Distributed Databases: In distributed databases, auto-increment features for generating IDs independently on different nodes don't work. Therefore, a unique ID generator is required to serve as a primary key in a distributed setting.
      2. Importance of Unique IDs:
      Having unique IDs brings several benefits, such as:
      - Event Flow Identification: Unique IDs help trace the flow of an event in system logs, aiding in debugging and analysis.
      - Performance Tracing and Analysis: Real-world systems like Facebook's Canopy use unique TraceIDs to identify events across multiple microservices involved in fulfilling a user request.
      3. Designing a Unique ID Generator:
      To design a unique ID generator within a distributed system, the following aspects are addressed:
      - Lesson 1: Design of a Unique ID Generator: This lesson covers the requirements and discusses three methods for generating unique IDs: using UUIDs, utilizing a database, or implementing a range handler.
      - Lesson 2: Unique IDs with Causality: This lesson expands on the ID generation process by considering causality and incorporating the element of time.
    Conclusion:
    Unique IDs play a vital role in identifying events and objects within distributed systems. Designing a reliable and efficient unique ID generator is challenging but essential. By understanding the requirements and exploring various methods of ID generation, we can develop a robust system that ensures globally unique IDs and enables seamless functionality within distributed systems.


Designing a System for Generating Unique IDs
    Introduction:
    In this lesson, we will explore the design of a system that generates unique IDs. We'll discuss the requirements for unique identifiers and examine three different solutions: using UUID, utilizing a database, and implementing a range handler.

    1. Requirements for Unique Identifiers:
    To design an effective ID generation system, we need to consider the following requirements:

    - Uniqueness: Each identifier should be unique to ensure proper identification.
    - Scalability: The system should be capable of generating at least a billion unique IDs per day.
    - Availability: It should be able to handle the generation of IDs for all events, even those occurring at nanosecond intervals.
    - 64-bit Numeric ID: Restricting the ID length to 64 bits is sufficient for future use.

    2. First Solution: Using UUID (Universally Unique Identifier):
    A simple solution is to use UUID, a 128-bit number that offers a vast number of unique combinations. UUIDs have different versions, and we opt for version 4, which generates a pseudorandom number. Each server can generate its own UUID independently, making it highly scalable and available. However, using UUIDs may result in slower primary key indexing, and there is a small chance of collisions.

    3. Second Solution: Using a Database:
    An alternative approach is to mimic the auto-increment feature of a database. A central database provides a current ID that increments by one for each event. To avoid a single point of failure, we modify the conventional auto-increment by incrementing the ID by a value 'm' representing the number of database servers. This approach ensures scalability and prevents ID duplication. However, scaling for multiple data centers can be challenging.

    4. Third Solution: Using a Range Handler:
    To address the limitations of previous solutions, we can implement a range handler using ranges on a central server. Multiple ranges, such as 1 to 1,000,000 and 1,000,001 to 2,000,000, can be allocated to servers. Each server claims a range and assigns IDs from within that range. This approach prevents ID duplication, allows concurrent request handling, and can be load-balanced. However, a failed server results in the loss of a significant range until it becomes active again.

    Conclusion:
    Designing a system for generating unique IDs requires careful consideration of requirements such as uniqueness, scalability, availability, and ID length. The use of UUIDs, databases, or range handlers presents different trade-offs and solutions. By understanding these options, we can develop an ID generation system that meets the specific needs of our distributed system.


Unique IDs with Causality
Unique IDs with Causality

In this lesson, we will learn how to generate unique IDs using time and also maintain the causality of events. The ability to distinguish between events and understand their sequence is important in various applications.

Causality: 
Causality refers to the relationship between events where one event is dependent on another and cannot occur before it. It helps us understand the order of events. Concurrent events, on the other hand, occur independently of each other and do not have a causal relationship.

Using UNIX timestamps: 
UNIX timestamps, which are granular to the millisecond, can be used to generate unique IDs. By assigning a timestamp to each event, we can maintain causality. We can generate a large number of IDs per second using this approach.

Pros: 
- Simple and scalable solution
- Enables multiple servers to handle concurrent requests

Cons: 
- Same timestamp can be returned for concurrent events, resulting in non-unique IDs

Twitter Snowflake: 
Twitter Snowflake is a system that efficiently uses time to generate unique IDs. It divides a 64-bit ID into different components: sign bit, timestamp, worker number, and sequence number. The timestamp component allows for time-based sorting of IDs.

Pros: 
- Time-based sorting of IDs
- Highly available ID generator

Cons: 
- IDs generated in a dead period are wasted, leading to gaps in the range of IDs

Using logical clocks: 
Logical clocks, such as Lamport and vector clocks, can be used to maintain causal history of events.

Lamport clocks: 
In Lamport clocks, each node has a numeric counter that is incremented before executing an event. Messages between nodes carry the counter value, allowing for partial ordering of events based on the happened-before relationship. However, Lamport clocks cannot infer global causality.

Vector clocks: 
Vector clocks capture the causal history of events by using a vector data structure. Each node has a counter, and the vector represents the state of all nodes. It provides a total ordering of events and allows for inferring causality at the global level.

Pros and Cons of different approaches:
- UUID: Unique, scalable, available, but does not maintain causality.
- Database: Not unique, not scalable, available, maintains causality.
- Range handler: Unique, scalable, available, maintains causality to some extent.
- UNIX timestamps: Not unique, weak scalability, available, maintains causality weakly.
- Twitter Snowflake: Unique, scalable, available, maintains causality weakly.
- Logical clocks: Unique, scalability depends on the number of nodes, available, maintains causality.

TrueTime API:
Google's TrueTime API in Spanner provides an alternative solution by reporting an interval of time instead of a specific timestamp. It takes into account clock uncertainties and provides a narrower interval of time. It relies on GPS receivers or atomic clocks in data centers to ensure clock synchronization.

Summary:
Generating unique IDs with causality is important in various applications. UNIX timestamps, Twitter Snowflake, logical clocks (Lamport and vector clocks), and TrueTime API are some approaches to achieve this. Each approach has its pros and cons in terms of uniqueness, scalability, availability, and causality maintenance. The choice of approach depends on the specific requirements of the application.