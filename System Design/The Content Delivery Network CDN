CDN (Content Delivery Network) is designed to solve several problems that arise when millions of users worldwide use data-intensive applications that are served from a single data center. Let's understand these problems in simpler terms:

  1. High latency: Latency refers to the delay between a user's request and the response they receive. When the data center is far away from the user, it results in high latency due to factors like distance, network congestion, and processing delays. Real-time applications like voice or video streaming require low latency for a smooth user experience. CDN helps reduce latency by bringing the content closer to the users, minimizing the physical distance data needs to travel.

  2. Data-intensive applications: Data-intensive applications generate large amounts of traffic. When this traffic needs to travel over long distances, it can lead to network issues like reduced throughput and congestion. Additionally, the origin server in the data center may have to send the same data to multiple users individually, causing redundant data transmission. CDN addresses these problems by caching and distributing content across multiple servers located in different regions. Users can then access the content from nearby servers, reducing network strain and improving performance.

  3. Scarcity of data center resources: As the number of users increases, a single data center may struggle to handle the growing demand. Limited computational capacity and bandwidth become bottlenecks, affecting the scalability and reliability of the service. CDN tackles this issue by distributing the load across multiple servers and data centers. By leveraging a network of geographically dispersed servers, CDN ensures that resources are efficiently utilized, enabling better scalability and reducing the risk of a single point of failure.

In summary, CDN solves the problems of high latency, handling data-intensive applications, and addressing resource limitations in a single data center by distributing content to multiple servers and data centers closer to the users. This improves performance, reduces network congestion, and enhances the overall user experience.

Proposed solution:
A content delivery network (CDN) is the solution to the problems we discussed earlier. It is a group of proxy servers distributed geographically. A proxy server acts as an intermediate server between the client and the origin server. These proxy servers are placed at the network edge, close to the end users, to quickly deliver content by reducing latency and saving bandwidth. CDNs go beyond being simple proxy servers and provide additional intelligence.

To bring data closer to users, CDNs store copies of static and dynamic data in small data centers near users. CDN providers focus on reducing propagation delay by bringing the data closer to users and ensuring sufficient bandwidth availability through the path. By doing so, they can minimize transmission and queuing delays.

CDNs solve the discussed problems in the following ways:
1. High latency: CDNs bring content closer to end users, reducing physical distance and latency.
2. Data-intensive applications: CDNs serve a large number of users through a few CDN components in a specific area, minimizing issues. The origin data center provides data to local CDN components only once, and local CDN components can then serve different users individually without each user having to download their own copy from the origin servers.
3. Scarcity of data center resources: CDNs handle most of the traffic for popular content, relieving the load on origin servers. Local or distributed CDN components share the load, ensuring efficient resource utilization.

Requirements:
Let's discuss the functional and non-functional requirements for a CDN.

Functional requirements:
- Retrieve: The CDN should be able to retrieve content from the origin servers based on the CDN model being used.
- Request: CDN proxy servers should respond to user requests for content delivery.
- Deliver: In a push model, origin servers should be able to send content to CDN proxy servers.
- Search: The CDN should execute searches against user queries to find cached or stored content within the CDN infrastructure.
- Update: If there are scripts running in the CDN, it should be able to update content within peer CDN proxy servers.
- Delete: The CDN should have the ability to delete cached entries from CDN servers based on the type of content (static or dynamic).

Non-functional requirements:
- Performance: The CDN design should minimize latency, providing a low-delay user experience.
- Availability: CDNs should be available at all times, with protection against attacks like Distributed Denial of Service (DDoS).
- Scalability: The CDN design should scale horizontally to handle increasing user requests.
- Reliability and security: The CDN should be reliable, avoiding single points of failure, and capable of handling massive traffic loads. It should also provide protection against various attacks.

Building blocks:
The design of a CDN incorporates the following building blocks:
- DNS: Maps CDN domain names to IP addresses, directing users to the specified proxy server.
- Load balancers: Distribute requests among operational proxy servers, ensuring efficient load distribution.

In summary, a CDN is a network of geographically distributed proxy servers that bring data closer to users, reducing latency and addressing issues with data-intensive applications. It satisfies functional requirements like content retrieval, delivery, and search, while meeting non-functional requirements such as performance, availability, scalability, reliability, and security. The CDN design utilizes building blocks like DNS and load balancers to enable efficient content delivery.