A rate limiter is a mechanism that puts a cap on the number of requests a service can handle within a specific time frame. It throttles incoming requests that exceed the predefined limit. For instance, if a service's API is set to allow 500 requests per minute, any client making more than 500 requests within that minute would be blocked from making further requests.

The need for a rate limiter arises as a defensive layer for services to prevent excessive usage, both intentional and unintentional. It protects against abusive behaviors targeting the application layer, such as denial-of-service (DOS) attacks and brute-force password attempts.

The following scenarios illustrate the usefulness of rate limiters in making services more reliable:
1. Preventing resource starvation: Rate limiters protect against friendly-fire denial-of-service incidents caused by errors or misconfigurations leading to resource starvation.
2. Managing policies and quotas: Rate limiters ensure fair and reasonable use of shared resources among multiple users by applying limits on time duration or quantity allocated.
3. Controlling data flow: In systems handling large volumes of data, rate limiters distribute the workload evenly among different machines to avoid burdening a single machine.
4. Avoiding excess costs: Rate limiting helps control the cost of operations, preventing experiments from running out of control and incurring large bills. Some cloud service providers use rate limiting to offer freemium services with limited usage.

To design a rate limiter, we'll cover the following steps:
1. Requirements: Discuss functional and non-functional requirements, types of throttling, and efficient locations for placing the rate limiter.
2. High-level design: Provide an overview of the rate limiter's high-level design.
3. Detailed design: Explore the building blocks involved in the detailed design of a rate limiter.
4. Rate limiter algorithms: Explain various algorithms essential for the operations of a rate limiter.

Requirements of a Rate Limiter's Design:
A rate limiter is designed with specific functional and non-functional requirements to limit the number of requests a client can make to an API within a defined time window. The requirements include:
Functional Requirements:
  1. Limit Requests: The rate limiter restricts the number of requests a client can send within a specified time frame.
  2. Configurable Limit: The limit of requests per time window should be configurable, allowing flexibility to adjust the rate limit as needed.
  3. Notification on Threshold Crossed: The rate limiter should notify the client with an error or notification when the defined threshold is exceeded, whether on a single server or across multiple servers.

Non-functional Requirements:
  1. Availability: The rate limiter must be highly available as it serves as a protective layer for the system.
  2. Low Latency: The rate limiter should operate with minimal latency to avoid impacting user experience.
  3. Scalability: The design should be highly scalable to handle an increasing number of client requests over time.

Types of Throttling:
A rate limiter can perform three types of throttling:
  1. Hard Throttling: Requests that exceed the predefined limit are discarded, allowing no further processing.
  2. Soft Throttling: A certain percentage of requests exceeding the limit (e.g., 5%) may be allowed for a more lenient approach.
  3. Elastic or Dynamic Throttling: Requests can exceed the predefined limit if there are excess resources available, without a specific percentage defined for the upper limit.

Placement of Rate Limiter:
The rate limiter can be placed in three different ways:
  1. Client-side: Placing the rate limiter on the client side is easy but insecure, as it can be tampered with by malicious activity.
  2. Server-side: Placing the rate limiter on the server side is more secure, and each server has its rate limiter to handle incoming requests.
  3. As Middleware: The rate limiter can act as middleware, intercepting requests to API servers and performing rate limiting functions.

