Whatsapp System Design

What is WhatsApp?
WhatsApp is a widely-used chat application providing instant messaging services to over 2 billion users across 180+ countries. It allows one-on-one and group chats, supports file sharing (images, videos, etc.), and ensures high availability with minimal latency. Let's delve into the system design to understand its structure and functionality.

Requirements

Functional Requirements:
1. Support one-on-one chat.
2. Enable group chats with a maximum of 100 people.
3. Facilitate file sharing (images, videos, etc.).

Non-functional Requirements:
1. Ensure high availability with minimal latency.
2. Design a scalable and efficient system.

Extended Requirements

1. Provide message status indications (Sent, Delivered, and Read receipts).
2. Display the last seen time of users.
3. Implement push notifications.

Estimation and Constraints

Traffic:
Assuming 50 million daily active users, with each user sending 20 messages daily, the system would handle 2 billion messages per day.

Storage:
- 200 GB of database storage per day for messages.
- 10 TB of storage per day for media files, totaling 38 PB over 10 years.

Bandwidth:
The system requires a minimum bandwidth of around 120 MB per second for handling 10.2 TB of data ingress daily.

Data Model Design

The data model includes tables like users, messages, chats, users_chats, groups, and users_groups, linking users to chats and groups.

Database Selection

Considering the relational nature of the data model, a combination of PostgreSQL or a distributed NoSQL database like Apache Cassandra is suitable for scalability.

API Design

1. Get all chats or groups:
   - API to retrieve all chats or groups for a given user.

2. Get messages:
   - Retrieve all messages for a user from a specific channel (chat or group).

3. Send message:
   - Send a message from a user to a channel (chat or group).

4. Join or leave a group:
   - APIs to join or leave a group.
