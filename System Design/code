INPUT_FORMAT_PARSER_ONE = "1"
INPUT_FORMAT_PARSER_TWO = "2"
INPUT_FORMAT_PARSER_THREE = "3"

class PayrollEntry {
  let dateStart: Date 
  let dateEnd: Date 
  let regularHour: float 
  let overtimeHour: float
  let totalPay: float
}

class Employee {
  let firstName: String
  let lastName: String
  let employeeId: String
  let jobTitle: String 
  let hourlyRate: float
  let overTimeRate: float

  let workEntry: [PayrollEntry]
  // each employee will consist of a array of payroll entry data.
}

class ClientData {
  let clientId: String
  let clientName: String
  let employees: [Employee]
}
// Client data contain all the field for the client
// client data contains a array of employee which contain all the employee information[]

function clientParserOne (str): ClientData {
    // parsing CSV and massaging data then returning an obj listed above (return client data)
}

function processData(str, format) {
  //gets the string and the format and figure out which parser to use.
  let result;
  switch(format) {
    case INPUT_FORMAT_PARSER_ONE:
      result = clientParserOne (str);
    case INPUT_FORMAT_PARSER_TWO:
      result = clientParserOne(str);
    case INPUT_FORMAT_PARSER_THREE:
      result = clientParserOne (str);
  }
  if (result && validateResult (result)) {
    return result;
  }
}

function insertData(req, res) {
  data = readDataFromInput (req)
  // look at the request and extracting the content. 
  parserFormat = determineWhichParserToUse (data)
  // this figures out what kind of parser to use
  clientData = processData (data, parserFormat)
  if (clientData) {
    insertIntoDatabase (clientData)
    // if the data exist then insert it to the database
  }
  res. json ()
}
// this will be a route when client submit the data it will hit this route.


function generatePayrollSheet (req, res) {
  let clientData = fetchClientWithEmployeeWithTimeRange(req)
  // fetch data from the database for the client data. This function should take care of going to database and creates the object.
  if (clientData. employees. length === 0) {
    res.json()
    return;
  }
  
  let payrollResult = []
  
  for (let employee in clientData.employees) {
    payrollResult.push(generatePayrollData(employee))
  }
  // this will do the actual calculation of the tax information such as tax withholding, then the obj will be return
  
  let payrollPDFs = generatePDFForPayroll(payrollResult)
  // this will generate will the information to PDF and will return to client in downloadable zip file
  responseWithZipOfPDF(payrollPDFs)
}